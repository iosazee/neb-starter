// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
  output = "../src/generated/client"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String
  firstName      String
  lastName       String
  email          String          @unique
  emailVerified  Boolean         @default(false)
  image          String?
  role           String?         @default("user")
  banned         Boolean?
  banReason      String?
  banExpires     Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  sessions       Session[]
  authpasskeys AuthPasskey[]

  @@map("user")
}

model Session {
  id             String   @id @default(cuid())
  userId         String
  token          String   @unique
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verification")
}


model AuthPasskey {
  id            String  @id @default(cuid())
  userId        String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialId  String
  publicKey     String
  counter       Int
  platform      String
  lastUsed      String
  status        String
  createdAt     String
  updatedAt     String
  revokedAt     String?
  revokedReason String?
  metadata      String?
  aaguid        String?

  @@unique([credentialId])
  @@map("authPasskey")
}

model PasskeyChallenge {
  id        String @id @default(cuid())
  userId    String
  challenge String
  type      String
  createdAt String
  expiresAt String
  registrationOptions String?
 

  @@map("passkeyChallenge")
}


model CacheEntry {
  key       String    @id
  value     String    @db.Text 
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([expiresAt]) 
}